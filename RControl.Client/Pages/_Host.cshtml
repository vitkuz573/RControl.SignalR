@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace RControl.Client.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <base href="~/" />
    <link href="css/site.css" rel="stylesheet" />
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />

    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&amp;display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/flowbite@1.5.4/dist/flowbite.min.css" />
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css" />

    <script src="https://cdn.tailwindcss.com"></script>
    <script src="_content/Blazorise.Tailwind/blazorise.tailwind.config.js?v=1.2.3.0"></script>

    <link href="_content/Blazorise/blazorise.css" rel="stylesheet" />
    <link href="_content/Blazorise.Tailwind/blazorise.tailwind.css" rel="stylesheet" />
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>

    <script src="https://unpkg.com/flowbite@1.5.4/dist/flowbite.js"></script>

    <script>
        let currentDotnetHelper = null;

        window.setupContextMenu = function (element, dotnetHelper) {
            currentDotnetHelper?.invokeMethodAsync('HideContextMenu');
            currentDotnetHelper = dotnetHelper;

            const handleClickOutside = function (event) {
                const isContextMenuClicked = element.contains(event.target) || event.target.closest('.context-menu');
                if (!isContextMenuClicked) {
                    currentDotnetHelper.invokeMethodAsync('HideContextMenu');
                    currentDotnetHelper = null;
                }
            };

            document.addEventListener('click', handleClickOutside);

            element.oncontextmenu = function (event) {
                event.preventDefault();
                currentDotnetHelper.invokeMethodAsync('ShowContextMenu', { x: event.clientX, y: event.clientY });
            };
        };
    </script>
</body>
</html>
