@namespace RControl.Client.Components
@using RControl.Client.Models
@using System.Text.Json;
@inject IJSRuntime JS

<div class="ml-4 mt-2">
    <button class="text-lg font-medium mr-2" @onclick="(() => Item.ToggleExpansion())">
        <i class="fa @GetIconClass(Item)" />
    </button>

    @if (Item is Folder)
    {
        <span class="cursor-pointer" @onclick="(() => OnClick.InvokeAsync(Item))">@Item.Name</span>
    }
    else
    {
        <span @ref="spanElement">@Item.Name</span>
    }

    <ContextMenuComponent Style="@contextMenuStyle" IsVisible="@isContextMenuVisible" OnClick="OnContextMenuItemClick" />

    @if (Item is Computer computer)
    {
        <ComputerModal @ref="ComputerModal" Computer="computer" />
    }

    @if (Item is Folder folder && folder.Children.Count > 0 && folder.IsExpanded)
    {
        foreach (var childItem in folder.Children)
        {
            <TreeItemComponent Item="childItem" OnClick="OnClick" />
        }
    }
</div>

@code {
    private ComputerModal ComputerModal;

    [Parameter]
    public TreeItem Item { get; set; }

    [Parameter]
    public EventCallback<TreeItem> OnClick { get; set; }

    private ElementReference spanElement;
    private bool isContextMenuVisible = false;
    private string contextMenuStyle = "";

    private Dictionary<string, Action> commandStrategies;

    protected override void OnInitialized()
    {
        commandStrategies = new Dictionary<string, Action>
        {
            { "Connect", () => { if (Item is Computer) ComputerModal.ModalRef.Show(); } }
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dotnetHelper = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setupContextMenu", spanElement, dotnetHelper);
        }
    }

    [JSInvokable]
    public void ShowContextMenu(JsonElement position)
    {
        isContextMenuVisible = false;
        var x = position.GetProperty("x").GetInt32();
        var y = position.GetProperty("y").GetInt32();
        contextMenuStyle = $"top: {y}px; left: {x}px;";
        isContextMenuVisible = true;
        StateHasChanged();
    }

    [JSInvokable]
    public void HideContextMenu()
    {
        isContextMenuVisible = false;
        StateHasChanged();
    }

    private void OnContextMenuItemClick(string command)
    {
        isContextMenuVisible = false;

        if (commandStrategies.ContainsKey(command))
        {
            commandStrategies[command]();
        }
    }

    private string GetIconClass(TreeItem item)
    {
        if (item is Folder)
        {
            return item.IsExpanded ? "fa-folder-open" : "fa-folder";
        }
        else
        {
            return "fa-desktop";
        }
    }
}
